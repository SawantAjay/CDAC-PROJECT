//receiver code 

#define BLYNK_TEMPLATE_ID "TMPL3E33DZtsD"
#define BLYNK_TEMPLATE_NAME "Sensor Networking"

#define BLYNK_PRINT Serial
#include <SPI.h>
#include <mcp_can.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

char auth[] = "YrnqKjixTSVKuKMFNoxyr6YspbtumR4d";  
char ssid[] = "Amit";                               
char pass[] = "12345678";                           

const int SPI_CS_PIN = 5;
MCP_CAN CAN0(SPI_CS_PIN);

#define BUZZER_PIN 27
const int GAS_THRESHOLD = 2;
const float TEMP_THRESHOLD = 35.0;

unsigned long lastDisplayTime = 0;
const unsigned long displayDuration = 2000;

void setup() {
  Serial.begin(115200);
  SPI.begin(18, 19, 23, 5);

  pinMode(SPI_CS_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);

  lcd.begin();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Initializing...");

  if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_16MHZ) == CAN_OK) {
    Serial.println("MCP2515 Initialized Successfully!");
    lcd.setCursor(0, 1);
    lcd.print("CAN Ready");
    delay(1000);
  } else {
    Serial.println("MCP2515 Initialization Failed!");
    lcd.setCursor(0, 1);
    lcd.print("CAN Failed!");
    while (1);
  }

  CAN0.setMode(MCP_NORMAL);

  Blynk.begin(auth, ssid, pass, "blynk.cloud", 80);
  lcd.clear();
}

void loop() {
  Blynk.run();

  if (CAN0.checkReceive() == CAN_MSGAVAIL) {
    long unsigned int rxId;
    unsigned char len = 0;
    unsigned char rxBuf[8];

    CAN0.readMsgBuf(&rxId, &len, rxBuf);

    unsigned long currentTime = millis();

    if (currentTime - lastDisplayTime >= displayDuration) {
      Serial.print("Received data from ID: 0x");
      Serial.println(rxId, HEX);

      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Received ID: ");
      lcd.setCursor(13, 0);
      lcd.print(rxId, HEX);

      lastDisplayTime = currentTime;
    }

    if (len >= 6) {
      int tempInt = (rxBuf[0] << 8) | rxBuf[1];
      int humInt = (rxBuf[2] << 8) | rxBuf[3];
      int flameStatus = rxBuf[4];
      int gasLevel = rxBuf[5];

      float temperature = tempInt / 100.0;
      float humidity = humInt / 100.0;

      delay(1000);
      lcd.clear();

      lcd.setCursor(0, 0);
      lcd.print("Temp:");
      lcd.print(temperature);
      lcd.print("C");
      lcd.setCursor(0, 1);
      lcd.print("Humi:");
      lcd.print(humidity);
      lcd.print("%");

      Serial.print("Temperature: ");
      Serial.print(temperature);
      Serial.print(" Â°C, Humidity: ");
      Serial.print(humidity);
      Serial.print(" %, Flame Status: ");
      Serial.print(flameStatus ? "Flame Detected!" : "No Flame");
      Serial.print(", Gas Level: ");
      Serial.println(gasLevel);

      if (flameStatus || gasLevel > GAS_THRESHOLD || temperature > TEMP_THRESHOLD) {
        lcd.clear();
        lcd.setCursor(0, 0);

        if (flameStatus) {
          lcd.print("* FLAME ALERT! *");
          Serial.println("Flame detected!");
          Blynk.logEvent("fire_alert", "Fire Alert! Flame detected!");
        }

        if (gasLevel > GAS_THRESHOLD) {
          lcd.print("* GAS WARNING! *");
          Serial.println("Gas concentration high!");
          Blynk.logEvent("gas_warning", "Gas Warning! High gas concentration detected!");
        }

        if (temperature > TEMP_THRESHOLD) {
          lcd.print("* TEMP WARNING *");
          Serial.println("Temperature exceeds limit!");
          Blynk.logEvent("temperature_alert", "Temperature Alert! High temperature detected!");
        }

        digitalWrite(BUZZER_PIN, HIGH);
        delay(2000);
      } else {
        digitalWrite(BUZZER_PIN, LOW);
        Serial.println("Buzzer OFF. No hazard detected.");
      }

      Blynk.virtualWrite(V1, temperature);
      Blynk.virtualWrite(V2, humidity);
      Blynk.virtualWrite(V3, gasLevel);
      Blynk.virtualWrite(V4, flameStatus);
    }
  }

  delay(500);
}